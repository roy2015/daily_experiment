package com.roy.miscellaneous.leetcode.stage1.stage13;

import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * @author guojun
 * @date 2020/7/2
 *
 *
 * 401. 二进制手表
 * 二进制手表顶部有 4 个 LED 代表 小时（0-11），底部的 6 个 LED 代表 分钟（0-59）。
 *
 * 每个 LED 代表一个 0 或 1，最低位在右侧。
 *
 *
 *
 * 例如，上面的二进制手表读取 “3:25”。
 *
 * 给定一个非负整数 n 代表当前 LED 亮着的数量，返回所有可能的时间。
 *
 *
 *
 * 示例：
 *
 * 输入: n = 1
 * 返回: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]
 *
 *
 * 提示：
 *
 * 输出的顺序没有要求。
 * 小时不会以零开头，比如 “01:00” 是不允许的，应为 “1:00”。
 * 分钟必须由两位数组成，可能会以零开头，比如 “10:2” 是无效的，应为 “10:02”。
 * 超过表示范围（小时 0-11，分钟 0-59）的数据将会被舍弃，也就是说不会出现 "13:00", "0:61" 等时间。
 *
 * todo 以后做吧还没想好怎么做，主要是排列组合不知道怎么写
 *
 */
public class TestSolution401 {
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(TestSolution401.class);


    /**
     *     1011  0-11
     *  11 1011  0-59
     *
     *  tips: 1. 小时最多选3且是下列几种   1011（11） 0111（7）
     *        2. 分钟最多选5且是下列几种   111011（59）  110111（55）
     *                                              101111（47）
     *                                              011111（31）
     *
     *                                 111010（58） 111001（57） 110110（54） 110101（53）110011（51）
     *                                              101110（46）101101（45）101011（43）
     *                                              100111（39） 100011（35）011110（30）
     *                                              011101（29）011011（27）010111（23）
     *
     *                                 111000（56） 110100（52）   110010（50）
     *                                             110001（49） 101100（44） 101010（42）101001（41）
     *                                             38 37 34
     *                                             011100（28）11010（26） 25 010110（22） 21
     *
     *                                 110000（48） 101000（40）
     *                                             100100（36）100001（33）
     *                                             011000（24）010100（20）
     *
     *                                 100000（32）
     */
    static class Solution {
        public List<String> readBinaryWatch(int num) {





            return null;
        }
    }

    public static void main(String[] args) {
        logger.info("{}", new Solution());
    }
}
